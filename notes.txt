Aula 01:
    https://www.postgresql.org/download/linux/ubuntu/

    Configuração do banco de dados
        Criação de conexão TCP/IP com o servidor
            sudo nano /etc/postgresql/15/main/pg_hba.conf

Aula 02:
    Comandos CLI:
        psql -U postgres [-p 5432]
        Meta comandos
            \h [SELECT] (espaço para mais)
            \l >> lista bases de dados
            \du >> lista roles
            \d[S] >> lista tabelas [do sistema]
            \? >> lista meta comandos
            \c <base> >> conecta em uma base de dados
        CREATE DATABASE database_lab;
    pipe ||
    SELECT DISTINCT
    WHERE
    Ordem de processamento: FROM > WHERE > SELECT > ORDER BY

Aula 03:
    WHERE OR e AND
    WHERE IN >> IN é mais perfomático que sequências de OR's
    WHERE NOT IN
    WHERE BETWEEN >> BETWEEN mais perfomático que IN
    Wildcard '%' >> zero ou mais valores
    ILIKE >> ignora o case, diferente do LIKE
    Wildcard '_' >> qualquer um caractere
    ESCAPE >> criação de carractere de escape para texto

    Migração de base de dados
        Comandos CLI:
            CREATE DATABASE vr_40 WITH TEMPLATE vr; (criação com base em outra base)
            SELECT pid FROM pg_stat_activity WHERE datname = 'vr';
            SELECT pg_terminate_backend(<pid>);
            ALTER DATABASE <base> OWNER TO <owner>;
            ALTER DATABASE <base> WITH CONNECTION LIMIT = 50;
            ALTER DATABASE <base> RENAME TO <nome>;
            COPY <tabela> TO '/tml/tabela.csv' WITH CSV;
        Comando pg_dump deve ser pelo terminal
        Migração de dados:
            Base já deve existir
            pg_restore -U postgres -p 5432 -d vr -v -Fc /tmp/vr.backup
            Também é possível fazer pelo pgAdmin

Aula 04:
    Comandos:
        Backup e Restauração
            pg_dump -U postgres -p 5432 -d vr -v -Fc > /tmp/vr.dump
            (CLI) CREATE DATABASE vr_restore;
            pg_restore -U postgres -p 5432 -d vr_restore -v -Fc /tmp/vr.backup
    JOINS
    NATURAL JOIN
    SELECT INTO

Aula 05:
    GROUP BY (agrupamento)
    Funções de agregação
        SUM
        COUNT
        AVG
    ROUND
    HAVING
        filtro dos resultados agregados
        WHERE acontece antes do agrupamento
        HAVING acontece depois do agrupamento
    UNION
        usada para combinar resultados
        necessita de mesma quantidade e tipo de colunas
        colunas não precisam ter mesmo nome
        por padrão remove as duplicidades
        UNION ALL exibe duplicidades
    INTERSECT
        não precisa ter o mesmo nome de colunas como o natural join precisa
        INTERSECT ALL
    EXCEPT
        apenas o que não tem na primeira tabela
    CAST

Aula 06:
    Subconsultas/Subqueries
        Geralmente para filtros/WHERE dinâmicos
    CTE (Common Table Expressions)
        WITH
        WITH RECURSIVE
            CREATE DATABASE cte;
            string_agg(mc.descricao, ' >> ' ORDER BY mc.nivel DESC)

Aula 07:
    DML
    INSERT
    RETURNING
    UPDATE
    função postgres: INTERVAL
    coluna especial: ctid >> id da linha
    UPDATE com JOIN
        O PostgreSQL não permite usar o JOIN em UPDATE igual no MySQL, sendo de outra forma.
    DELETE
        USING >> forma para realizar 'JOIN' em DELETE
        Subconsultas é uma outra forma para JOIN
    UPSERT
        Insere se não existir ou UPDATE caso existir
        Conhecio como UPSERT porém realizado através do INSERT
        ON CONFLICT
            id >> coluna para verificar o conflito
            DO NOTHING
            DO UPDATE
                EXCLUDED >> palavra reservada para referenciar a linha a ser inserida
    TRUNCATE
        Redefine a tabela, mais performático que DELETE

Aula 08:
    Performance
        Otimização de Consultas x Configurações
    Configurações
        Memória
            work_mem
            hash_mem_multiplier
            shared_buffers
                recomendado 25%-40% da RAM na maioria dos casos
            effective_cache_size
        I/O
            effective_io_concurrency
            seq_page_cost and random_page_cost
        Estatísticas
            default_statistics_target
    Índices
    VACUUM