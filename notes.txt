Aula 01:
    https://www.postgresql.org/download/linux/ubuntu/

    Configuração do banco de dados
        Criação de conexão TCP/IP com o servidor
            sudo nano /etc/postgresql/15/main/pg_hba.conf

Aula 02:
    Comandos CLI:
        psql -U postgres [-p 5432]
        Meta comandos
            \h [SELECT] (espaço para mais)
            \l >> lista bases de dados
            \du >> lista roles
            \d[S] >> lista tabelas [do sistema]
            \? >> lista meta comandos
            \c <base> >> conecta em uma base de dados
        CREATE DATABASE database_lab;
    pipe ||
    SELECT DISTINCT
    WHERE
    Ordem de processamento: FROM > WHERE > SELECT > ORDER BY

Aula 03:
    WHERE OR e AND
    WHERE IN >> IN é mais perfomático que sequências de OR's
    WHERE NOT IN
    WHERE BETWEEN >> BETWEEN mais perfomático que IN
    Wildcard '%' >> zero ou mais valores
    ILIKE >> ignora o case, diferente do LIKE
    Wildcard '_' >> qualquer um caractere
    ESCAPE >> criação de carractere de escape para texto

    Migração de base de dados
        Comandos CLI:
            CREATE DATABASE vr_40 WITH TEMPLATE vr; (criação com base em outra base)
            SELECT pid FROM pg_stat_activity WHERE datname = 'vr';
            SELECT pg_terminate_backend(<pid>);
            ALTER DATABASE <base> OWNER TO <owner>;
            ALTER DATABASE <base> WITH CONNECTION LIMIT = 50;
            ALTER DATABASE <base> RENAME TO <nome>;
            COPY <tabela> TO '/tml/tabela.csv' WITH CSV;
        Comando pg_dump deve ser pelo terminal
        Migração de dados:
            Base já deve existir
            pg_restore -U postgres -p 5432 -d vr -v -Fc /tmp/vr.backup
            Também é possível fazer pelo pgAdmin

Aula 04:
    Comandos:
        Backup e Restauração
            pg_dump -U postgres -p 5432 -d vr -v -Fc > /tmp/vr.dump
            (CLI) CREATE DATABASE vr_restore;
            pg_restore -U postgres -p 5432 -d vr_restore -v -Fc /tmp/vr.backup
    JOINS
    NATURAL JOIN
    SELECT INTO

Aula 05:
    GROUP BY (agrupamento)
    Funções de agregação
        SUM
        COUNT
        AVG
    ROUND
    HAVING
        filtro dos resultados agregados
        WHERE acontece antes do agrupamento
        HAVING acontece depois do agrupamento
    UNION
        usada para combinar resultados
        necessita de mesma quantidade e tipo de colunas
        colunas não precisam ter mesmo nome
        por padrão remove as duplicidades
        UNION ALL exibe duplicidades
    INTERSECT
        não precisa ter o mesmo nome de colunas como o natural join precisa
        INTERSECT ALL
    EXCEPT
        apenas o que não tem na primeira tabela
    CAST

Aula 06:
    Subconsultas/Subqueries
        Geralmente para filtros/WHERE dinâmicos
    CTE (Common Table Expressions)
        WITH
        WITH RECURSIVE
            CREATE DATABASE cte;
            string_agg(mc.descricao, ' >> ' ORDER BY mc.nivel DESC)

Aula 07:
    DML
    INSERT
    RETURNING
    UPDATE
    função postgres: INTERVAL
    coluna especial: ctid >> id da linha
    UPDATE com JOIN
        O PostgreSQL não permite usar o JOIN em UPDATE igual no MySQL, sendo de outra forma.
    DELETE
        USING >> forma para realizar 'JOIN' em DELETE
        Subconsultas é uma outra forma para JOIN
    UPSERT
        Insere se não existir ou UPDATE caso existir
        Conhecio como UPSERT porém realizado através do INSERT
        ON CONFLICT
            id >> coluna para verificar o conflito
            DO NOTHING
            DO UPDATE
                EXCLUDED >> palavra reservada para referenciar a linha a ser inserida
    TRUNCATE
        Redefine a tabela, mais performático que DELETE

Aula 08:
    Performance
        Otimização de Consultas x Configurações
    Configurações
        Memória
            work_mem
            hash_mem_multiplier
            shared_buffers
                recomendado 25%-40% da RAM na maioria dos casos
            effective_cache_size
        I/O
            effective_io_concurrency
            seq_page_cost and random_page_cost
        Estatísticas
            default_statistics_target
    Índices
    VACUUM

Aula 09:
    pgtune: https://pgtune.leopard.in.ua/
    pgtune não mostra, para nossa situação:
        enable_partitionwise_join = on
        enable_partitionwise_aggregate = on
        default_statistics_target = 1000
            afeta a decisão de usar ou não busca sequencial
            aumentar de 500 em 500
    sudo find / -name postgresql.conf
    sudo systemctl restart postgresql@14-main.service
    pgtune ALTER SYSTEM >> postgresql.auto.conf
        postgresql.auto.conf priorizada sobre postgresql.conf
        ALTER SYSTEM [SET | RESET]
        ALTER SYSTEM RESET ALL
        context que não são postmaster ou internal não precisam reiniciar o postgresql
    EXPLAIN ANALYZE
    CREATE INDEX
    pgbench
    postgresqltuner
    EXTENSION pg_stat_statements
        pode mostrar indíces não utilizados

Aula 10:
    CREATE TABLE
    tipos de dados:
        boolean
        serial
        char
        varchar
            apenas os caracteres que usou
        text
        integer
        numeric/decimal
        date
        interval
        numeric[] >>> array
        json
        jsonb
            converte para binário e permite usar índices
        uuid
            gen_random_uuid()
                melhor performance que uuid_generate_v4()
    DEFAULT
    CREATE TEMP TABLE
        existe apenas durante a sessão
    WITH NO DATA
    constraints:
        CHECK
        PRIMARY KEY
        NOT NULL
        UNIQUE
        FOREIGN KEY
    CREATE SEQUENCE
    PostGIS
    CREATE EXTENSION
    CREATE SCHEMA
    \d+ tabela >>> exibe estrutura detalhada da tabela

Aula 11:
    Replicação
        pode ser síncrona ou assíncrona
    terminal:
        pg_createcluster 14 master
    editar WRITE-AHEAD LOG (WAL) de postgresql.conf
        wal_level = replica
        max_wal_senders = 10
        max_replication_slots = 10
        wal_keep_size = 64MB (deve ser acompanhado)
        wal_level = logical >>> apenas dados/tabelas específicos
    editar CONNECTIONS AND AUTHENTICATION de postgresql.conf
        listen_adresses = '*' (ideal colocar hosta a host)
        (motivo é a conexão entre os servidores primários e secundários)
    editar pg_hba.conf
        host    replication     replicador      0.0.0.0/0               scram-sha-256
        replicador >>> usuário
        0.0.0.0/0 >>> IP da máquina secundária em uma situação real
    terminal:
        pg_ctlcluster 14 master start
        psql -U postgres
            CREATE USER replicador WITH REPLICATION PASSWORD '123';
        \du
    pg_lsclusters >>> lista clusters
    replicação apenas na mesma versão major
    cluster secundário:
        pg_createcluster 14 slave
        remover todos os dados de /var/lib/postgresql/14/slave
            rm -rf ./*
        pg_basebackup -h <IP> -p <PORT> -U replicador -D /var/lib/postgresql/14/slave -Fp -Xs -P -R
            backup no nível de sistema de arquivos
            -p >>> caso port diferente
        pg_ctlcluster 14 slave start
    postgresql.auto.conf >>> configurações de conexão com o servidor primário
    replicação por slots
        (usando o mesmo servidor main na aula)
    servidores S (slot) e M (master):
        pg_createcluster 14 slot (S)
        cd /var/lib/postgresql/14/slot (S)
        rm -rf ./* (S)
        CLI (M)
            SELECT * FROM pg_create_physical_replication_slot('slot_1');
            SELECT slot_name, slot_type, active FROM pg_replication_slots;
            SELECT pg_current_wal_lsn(); >>> monitoramento da replicação
        Criando arquivo de configuração de forma manual (S)
            (equivalente ao -R)
            su postgres
            pg_basebackup -h <IP> -p <PORT> -U replicador -D /var/lib/postgresql/14/slave -Fp -Xs -P
            touch standby.signal
            cd /etc/postgresql/14/slot
            nano postgresql.conf
                primary_conninfo = 'host=<IP> port=<PORT> user=replicador password=123'
                primary_slot_name = 'slot_1'
            CLI
                SELECT pg_last_wal_receive_lsn(); >>> monitoramento da replicação
    promoção de um servidor secudário
        (cenário em que o principal caiu)
        pg_ctlcluster 14 slot promote
        quando o master voltar, refaz a replicação e promove ele
        uma vez promovido não tem como desfazer

Aula 12:
    Usuários e permissões
    roles
        CREATE ROLE
    \du >>> display users
    WITH LOGIN
    CREATE USER
        já cria com permissões de login
    ALTER ROLE
    WITH PASSWORD
    WITH CREATEDB
    GRANT
    permissões nas tabelas em si
    REVOKE

Aula 13:
    Row level security
    ALTER TABLE tabela ENABLE ROW LEVEL SECURITY;
    SET ROLE
    RESET ROLE
    CREATE POLICY

Aula 14:
    Linguagem Procedural (PL/pgSQL) no PostgreSQL
    $$ >>> delimitador
    CREATE OR REPLACE FUNCTION

Aula 15:
    CASE WHEN

Aula 16:
    BEGIN
    COMMIT
    ROLLBACK
    EXCEPTION
    SELECT * FROM pg_locks;

Aula 17:
    data corruption
    principais causas
        hardware em más condições
        software defasado
        negligência
    fsync
        otimizar leitura e escrita
        wal_sync_method
    backup fisico x lógico
        pg_basebackup >>> físico
        pg_dump/pg_dumpall >>> lógico
    pg_resetwal
        redefine wal
        casos extremos, quando postgresql nem inicia
    realizar backup antes de tratar os dados
    recomendado restaurar em outro cluster após correção
    pg_amcheck
        verifica corrupção
        extensão contrib